// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: dev/warashi/muscat/v1/muscat.proto

package pbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	pb "github.com/Warashi/muscat/v2/pb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MuscatServiceName is the fully-qualified name of the MuscatService service.
	MuscatServiceName = "dev.warashi.muscat.v1.MuscatService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MuscatServiceHealthProcedure is the fully-qualified name of the MuscatService's Health RPC.
	MuscatServiceHealthProcedure = "/dev.warashi.muscat.v1.MuscatService/Health"
	// MuscatServiceOpenProcedure is the fully-qualified name of the MuscatService's Open RPC.
	MuscatServiceOpenProcedure = "/dev.warashi.muscat.v1.MuscatService/Open"
	// MuscatServiceCopyProcedure is the fully-qualified name of the MuscatService's Copy RPC.
	MuscatServiceCopyProcedure = "/dev.warashi.muscat.v1.MuscatService/Copy"
	// MuscatServicePasteProcedure is the fully-qualified name of the MuscatService's Paste RPC.
	MuscatServicePasteProcedure = "/dev.warashi.muscat.v1.MuscatService/Paste"
	// MuscatServiceGetInputMethodProcedure is the fully-qualified name of the MuscatService's
	// GetInputMethod RPC.
	MuscatServiceGetInputMethodProcedure = "/dev.warashi.muscat.v1.MuscatService/GetInputMethod"
	// MuscatServiceSetInputMethodProcedure is the fully-qualified name of the MuscatService's
	// SetInputMethod RPC.
	MuscatServiceSetInputMethodProcedure = "/dev.warashi.muscat.v1.MuscatService/SetInputMethod"
	// MuscatServicePortForwardProcedure is the fully-qualified name of the MuscatService's PortForward
	// RPC.
	MuscatServicePortForwardProcedure = "/dev.warashi.muscat.v1.MuscatService/PortForward"
	// MuscatServiceExecProcedure is the fully-qualified name of the MuscatService's Exec RPC.
	MuscatServiceExecProcedure = "/dev.warashi.muscat.v1.MuscatService/Exec"
)

// MuscatServiceClient is a client for the dev.warashi.muscat.v1.MuscatService service.
type MuscatServiceClient interface {
	Health(context.Context, *connect.Request[pb.HealthRequest]) (*connect.Response[pb.HealthResponse], error)
	Open(context.Context, *connect.Request[pb.OpenRequest]) (*connect.Response[pb.OpenResponse], error)
	Copy(context.Context) *connect.ClientStreamForClient[pb.CopyRequest, pb.CopyResponse]
	Paste(context.Context, *connect.Request[pb.PasteRequest]) (*connect.ServerStreamForClient[pb.PasteResponse], error)
	GetInputMethod(context.Context, *connect.Request[pb.GetInputMethodRequest]) (*connect.Response[pb.GetInputMethodResponse], error)
	SetInputMethod(context.Context, *connect.Request[pb.SetInputMethodRequest]) (*connect.Response[pb.SetInputMethodResponse], error)
	// PortForward is a bidirectional stream.
	// Forwarded port is send as metadata.
	// 1 connection is 1 stream.
	PortForward(context.Context) *connect.BidiStreamForClient[pb.PortForwardRequest, pb.PortForwardResponse]
	Exec(context.Context, *connect.Request[pb.ExecRequest]) (*connect.Response[pb.ExecResponse], error)
}

// NewMuscatServiceClient constructs a client for the dev.warashi.muscat.v1.MuscatService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMuscatServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MuscatServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	muscatServiceMethods := pb.File_dev_warashi_muscat_v1_muscat_proto.Services().ByName("MuscatService").Methods()
	return &muscatServiceClient{
		health: connect.NewClient[pb.HealthRequest, pb.HealthResponse](
			httpClient,
			baseURL+MuscatServiceHealthProcedure,
			connect.WithSchema(muscatServiceMethods.ByName("Health")),
			connect.WithClientOptions(opts...),
		),
		open: connect.NewClient[pb.OpenRequest, pb.OpenResponse](
			httpClient,
			baseURL+MuscatServiceOpenProcedure,
			connect.WithSchema(muscatServiceMethods.ByName("Open")),
			connect.WithClientOptions(opts...),
		),
		copy: connect.NewClient[pb.CopyRequest, pb.CopyResponse](
			httpClient,
			baseURL+MuscatServiceCopyProcedure,
			connect.WithSchema(muscatServiceMethods.ByName("Copy")),
			connect.WithClientOptions(opts...),
		),
		paste: connect.NewClient[pb.PasteRequest, pb.PasteResponse](
			httpClient,
			baseURL+MuscatServicePasteProcedure,
			connect.WithSchema(muscatServiceMethods.ByName("Paste")),
			connect.WithClientOptions(opts...),
		),
		getInputMethod: connect.NewClient[pb.GetInputMethodRequest, pb.GetInputMethodResponse](
			httpClient,
			baseURL+MuscatServiceGetInputMethodProcedure,
			connect.WithSchema(muscatServiceMethods.ByName("GetInputMethod")),
			connect.WithClientOptions(opts...),
		),
		setInputMethod: connect.NewClient[pb.SetInputMethodRequest, pb.SetInputMethodResponse](
			httpClient,
			baseURL+MuscatServiceSetInputMethodProcedure,
			connect.WithSchema(muscatServiceMethods.ByName("SetInputMethod")),
			connect.WithClientOptions(opts...),
		),
		portForward: connect.NewClient[pb.PortForwardRequest, pb.PortForwardResponse](
			httpClient,
			baseURL+MuscatServicePortForwardProcedure,
			connect.WithSchema(muscatServiceMethods.ByName("PortForward")),
			connect.WithClientOptions(opts...),
		),
		exec: connect.NewClient[pb.ExecRequest, pb.ExecResponse](
			httpClient,
			baseURL+MuscatServiceExecProcedure,
			connect.WithSchema(muscatServiceMethods.ByName("Exec")),
			connect.WithClientOptions(opts...),
		),
	}
}

// muscatServiceClient implements MuscatServiceClient.
type muscatServiceClient struct {
	health         *connect.Client[pb.HealthRequest, pb.HealthResponse]
	open           *connect.Client[pb.OpenRequest, pb.OpenResponse]
	copy           *connect.Client[pb.CopyRequest, pb.CopyResponse]
	paste          *connect.Client[pb.PasteRequest, pb.PasteResponse]
	getInputMethod *connect.Client[pb.GetInputMethodRequest, pb.GetInputMethodResponse]
	setInputMethod *connect.Client[pb.SetInputMethodRequest, pb.SetInputMethodResponse]
	portForward    *connect.Client[pb.PortForwardRequest, pb.PortForwardResponse]
	exec           *connect.Client[pb.ExecRequest, pb.ExecResponse]
}

// Health calls dev.warashi.muscat.v1.MuscatService.Health.
func (c *muscatServiceClient) Health(ctx context.Context, req *connect.Request[pb.HealthRequest]) (*connect.Response[pb.HealthResponse], error) {
	return c.health.CallUnary(ctx, req)
}

// Open calls dev.warashi.muscat.v1.MuscatService.Open.
func (c *muscatServiceClient) Open(ctx context.Context, req *connect.Request[pb.OpenRequest]) (*connect.Response[pb.OpenResponse], error) {
	return c.open.CallUnary(ctx, req)
}

// Copy calls dev.warashi.muscat.v1.MuscatService.Copy.
func (c *muscatServiceClient) Copy(ctx context.Context) *connect.ClientStreamForClient[pb.CopyRequest, pb.CopyResponse] {
	return c.copy.CallClientStream(ctx)
}

// Paste calls dev.warashi.muscat.v1.MuscatService.Paste.
func (c *muscatServiceClient) Paste(ctx context.Context, req *connect.Request[pb.PasteRequest]) (*connect.ServerStreamForClient[pb.PasteResponse], error) {
	return c.paste.CallServerStream(ctx, req)
}

// GetInputMethod calls dev.warashi.muscat.v1.MuscatService.GetInputMethod.
func (c *muscatServiceClient) GetInputMethod(ctx context.Context, req *connect.Request[pb.GetInputMethodRequest]) (*connect.Response[pb.GetInputMethodResponse], error) {
	return c.getInputMethod.CallUnary(ctx, req)
}

// SetInputMethod calls dev.warashi.muscat.v1.MuscatService.SetInputMethod.
func (c *muscatServiceClient) SetInputMethod(ctx context.Context, req *connect.Request[pb.SetInputMethodRequest]) (*connect.Response[pb.SetInputMethodResponse], error) {
	return c.setInputMethod.CallUnary(ctx, req)
}

// PortForward calls dev.warashi.muscat.v1.MuscatService.PortForward.
func (c *muscatServiceClient) PortForward(ctx context.Context) *connect.BidiStreamForClient[pb.PortForwardRequest, pb.PortForwardResponse] {
	return c.portForward.CallBidiStream(ctx)
}

// Exec calls dev.warashi.muscat.v1.MuscatService.Exec.
func (c *muscatServiceClient) Exec(ctx context.Context, req *connect.Request[pb.ExecRequest]) (*connect.Response[pb.ExecResponse], error) {
	return c.exec.CallUnary(ctx, req)
}

// MuscatServiceHandler is an implementation of the dev.warashi.muscat.v1.MuscatService service.
type MuscatServiceHandler interface {
	Health(context.Context, *connect.Request[pb.HealthRequest]) (*connect.Response[pb.HealthResponse], error)
	Open(context.Context, *connect.Request[pb.OpenRequest]) (*connect.Response[pb.OpenResponse], error)
	Copy(context.Context, *connect.ClientStream[pb.CopyRequest]) (*connect.Response[pb.CopyResponse], error)
	Paste(context.Context, *connect.Request[pb.PasteRequest], *connect.ServerStream[pb.PasteResponse]) error
	GetInputMethod(context.Context, *connect.Request[pb.GetInputMethodRequest]) (*connect.Response[pb.GetInputMethodResponse], error)
	SetInputMethod(context.Context, *connect.Request[pb.SetInputMethodRequest]) (*connect.Response[pb.SetInputMethodResponse], error)
	// PortForward is a bidirectional stream.
	// Forwarded port is send as metadata.
	// 1 connection is 1 stream.
	PortForward(context.Context, *connect.BidiStream[pb.PortForwardRequest, pb.PortForwardResponse]) error
	Exec(context.Context, *connect.Request[pb.ExecRequest]) (*connect.Response[pb.ExecResponse], error)
}

// NewMuscatServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMuscatServiceHandler(svc MuscatServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	muscatServiceMethods := pb.File_dev_warashi_muscat_v1_muscat_proto.Services().ByName("MuscatService").Methods()
	muscatServiceHealthHandler := connect.NewUnaryHandler(
		MuscatServiceHealthProcedure,
		svc.Health,
		connect.WithSchema(muscatServiceMethods.ByName("Health")),
		connect.WithHandlerOptions(opts...),
	)
	muscatServiceOpenHandler := connect.NewUnaryHandler(
		MuscatServiceOpenProcedure,
		svc.Open,
		connect.WithSchema(muscatServiceMethods.ByName("Open")),
		connect.WithHandlerOptions(opts...),
	)
	muscatServiceCopyHandler := connect.NewClientStreamHandler(
		MuscatServiceCopyProcedure,
		svc.Copy,
		connect.WithSchema(muscatServiceMethods.ByName("Copy")),
		connect.WithHandlerOptions(opts...),
	)
	muscatServicePasteHandler := connect.NewServerStreamHandler(
		MuscatServicePasteProcedure,
		svc.Paste,
		connect.WithSchema(muscatServiceMethods.ByName("Paste")),
		connect.WithHandlerOptions(opts...),
	)
	muscatServiceGetInputMethodHandler := connect.NewUnaryHandler(
		MuscatServiceGetInputMethodProcedure,
		svc.GetInputMethod,
		connect.WithSchema(muscatServiceMethods.ByName("GetInputMethod")),
		connect.WithHandlerOptions(opts...),
	)
	muscatServiceSetInputMethodHandler := connect.NewUnaryHandler(
		MuscatServiceSetInputMethodProcedure,
		svc.SetInputMethod,
		connect.WithSchema(muscatServiceMethods.ByName("SetInputMethod")),
		connect.WithHandlerOptions(opts...),
	)
	muscatServicePortForwardHandler := connect.NewBidiStreamHandler(
		MuscatServicePortForwardProcedure,
		svc.PortForward,
		connect.WithSchema(muscatServiceMethods.ByName("PortForward")),
		connect.WithHandlerOptions(opts...),
	)
	muscatServiceExecHandler := connect.NewUnaryHandler(
		MuscatServiceExecProcedure,
		svc.Exec,
		connect.WithSchema(muscatServiceMethods.ByName("Exec")),
		connect.WithHandlerOptions(opts...),
	)
	return "/dev.warashi.muscat.v1.MuscatService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MuscatServiceHealthProcedure:
			muscatServiceHealthHandler.ServeHTTP(w, r)
		case MuscatServiceOpenProcedure:
			muscatServiceOpenHandler.ServeHTTP(w, r)
		case MuscatServiceCopyProcedure:
			muscatServiceCopyHandler.ServeHTTP(w, r)
		case MuscatServicePasteProcedure:
			muscatServicePasteHandler.ServeHTTP(w, r)
		case MuscatServiceGetInputMethodProcedure:
			muscatServiceGetInputMethodHandler.ServeHTTP(w, r)
		case MuscatServiceSetInputMethodProcedure:
			muscatServiceSetInputMethodHandler.ServeHTTP(w, r)
		case MuscatServicePortForwardProcedure:
			muscatServicePortForwardHandler.ServeHTTP(w, r)
		case MuscatServiceExecProcedure:
			muscatServiceExecHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMuscatServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMuscatServiceHandler struct{}

func (UnimplementedMuscatServiceHandler) Health(context.Context, *connect.Request[pb.HealthRequest]) (*connect.Response[pb.HealthResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dev.warashi.muscat.v1.MuscatService.Health is not implemented"))
}

func (UnimplementedMuscatServiceHandler) Open(context.Context, *connect.Request[pb.OpenRequest]) (*connect.Response[pb.OpenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dev.warashi.muscat.v1.MuscatService.Open is not implemented"))
}

func (UnimplementedMuscatServiceHandler) Copy(context.Context, *connect.ClientStream[pb.CopyRequest]) (*connect.Response[pb.CopyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dev.warashi.muscat.v1.MuscatService.Copy is not implemented"))
}

func (UnimplementedMuscatServiceHandler) Paste(context.Context, *connect.Request[pb.PasteRequest], *connect.ServerStream[pb.PasteResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("dev.warashi.muscat.v1.MuscatService.Paste is not implemented"))
}

func (UnimplementedMuscatServiceHandler) GetInputMethod(context.Context, *connect.Request[pb.GetInputMethodRequest]) (*connect.Response[pb.GetInputMethodResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dev.warashi.muscat.v1.MuscatService.GetInputMethod is not implemented"))
}

func (UnimplementedMuscatServiceHandler) SetInputMethod(context.Context, *connect.Request[pb.SetInputMethodRequest]) (*connect.Response[pb.SetInputMethodResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dev.warashi.muscat.v1.MuscatService.SetInputMethod is not implemented"))
}

func (UnimplementedMuscatServiceHandler) PortForward(context.Context, *connect.BidiStream[pb.PortForwardRequest, pb.PortForwardResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("dev.warashi.muscat.v1.MuscatService.PortForward is not implemented"))
}

func (UnimplementedMuscatServiceHandler) Exec(context.Context, *connect.Request[pb.ExecRequest]) (*connect.Response[pb.ExecResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dev.warashi.muscat.v1.MuscatService.Exec is not implemented"))
}
